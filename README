<h2>üöÄ Automated Deployment Script - DevOps Stage 1</h2>

A production-grade Bash script that automates the complete deployment workflow of Dockerized applications to remote Linux servers.

## üìã Table of Contents

- [Features](#features)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Usage](#usage)
- [Script Workflow](#script-workflow)
- [Configuration](#configuration)
- [Troubleshooting](#troubleshooting)
- [Examples](#examples)

## ‚ú® Features

- **Automated Git Operations**: Clone repositories with PAT authentication and branch management
- **SSH Password Authentication**: Secure remote server access using username/password
- **Environment Preparation**: Automatic installation of Docker, Docker Compose, and Nginx
- **Intelligent Deployment**: Support for both Dockerfile and docker-compose.yml based projects
- **Nginx Reverse Proxy**: Automatic configuration of reverse proxy for containerized apps
- **Comprehensive Logging**: Timestamped logs for all operations with color-coded output
- **Error Handling**: Robust error detection and recovery mechanisms
- **Idempotency**: Safe to run multiple times without breaking existing deployments
- **Validation**: Multi-stage deployment verification and health checks
- **Cleanup Mode**: Complete removal of deployed resources with `--cleanup` flag

## üîß Prerequisites

### Local Machine Requirements

- **Operating System**: Linux or macOS
- **Bash**: Version 4.0 or higher
- **Git**: For repository operations
- **SSH Client**: For remote server access
- **sshpass**: For password-based SSH authentication (script will auto-install if missing)

### Remote Server Requirements

- **Operating System**: Ubuntu 20.04+ or Debian-based Linux
- **Access**: SSH access with sudo privileges
- **Network**: Port 80 (HTTP) and your application port open
- **Resources**: Minimum 1GB RAM, 10GB disk space

## üì¶ Installation

1. **Clone this repository**:
```bash
git clone https://github.com/yourusername/devops-stage1-deployment.git
cd devops-stage1-deployment
```

2. **Make the script executable**:
```bash
chmod +x deploy.sh
```

3. **Verify prerequisites**:
```bash
# Check Bash version
bash --version

# Check Git
git --version

# Check if sshpass is installed (optional - script will install it)
which sshpass
```

## üöÄ Usage

### Basic Deployment

Run the script and follow the interactive prompts:

```bash
./deploy.sh
```

### Cleanup Deployment

To remove all deployed resources:

```bash
./deploy.sh --cleanup
```

### Interactive Prompts

The script will ask for the following information:

1. **Git Repository URL**: Your project's Git repository
   - Example: `https://github.com/username/my-app.git`

2. **Personal Access Token (PAT)**: GitHub/GitLab token for authentication
   - Create at: GitHub Settings ‚Üí Developer settings ‚Üí Personal access tokens

3. **Branch Name**: Git branch to deploy (default: main)
   - Example: `main`, `develop`, `production`

4. **SSH Username**: Remote server username
   - Example: `ubuntu`, `root`, `admin`

5. **Server IP Address**: Your server's IP
   - Example: `192.168.1.100`, `203.0.113.45`

6. **SSH Password**: Password for SSH authentication
   - Input is hidden for security

7. **Application Port**: Internal container port
   - Example: `3000`, `8080`, `5000`

## üìä Script Workflow

### Stage 1: Parameter Collection
- Prompts for all required configuration
- Validates input parameters
- Extracts project metadata

### Stage 2: Repository Cloning
- Authenticates using PAT
- Clones or pulls latest changes
- Switches to specified branch

### Stage 3: Project Validation
- Verifies Dockerfile or docker-compose.yml exists
- Logs project structure

### Stage 4: SSH Connection
- Installs sshpass if needed
- Tests remote server connectivity
- Establishes secure connection

### Stage 5: Environment Preparation
- Updates system packages
- Installs Docker and Docker Compose
- Installs and configures Nginx
- Adds user to Docker group
- Enables required services

### Stage 6: Application Deployment
- Creates remote deployment directory
- Transfers project files via rsync
- Stops existing containers (idempotent)
- Builds and starts new containers
- Validates container health

### Stage 7: Nginx Configuration
- Creates reverse proxy configuration
- Routes HTTP traffic to container
- Enables the site configuration
- Reloads Nginx service

### Stage 8: Deployment Validation
- Verifies Docker service status
- Confirms container is running
- Tests Nginx proxy functionality
- Checks application accessibility
- Displays deployment summary

## ‚öôÔ∏è Configuration

### Project Requirements

Your project must have **ONE** of the following:

**Option 1: Dockerfile**
```dockerfile
FROM node:16
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

**Option 2: docker-compose.yml**
```yaml
version: '3'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
```

### Nginx Configuration

The script automatically creates an Nginx configuration that:
- Listens on port 80
- Proxies requests to your container
- Handles WebSocket upgrades
- Sets proper proxy headers

Example generated config:
```nginx
server {
    listen 80;
    server_name _;
    
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
```

## üêõ Troubleshooting

### Common Issues

**Issue**: `sshpass: command not found`
```bash
# Solution: The script auto-installs it, but you can manually install:
sudo apt-get install sshpass  # Debian/Ubuntu
sudo yum install sshpass       # RHEL/CentOS
```

**Issue**: `Permission denied (publickey,password)`
```bash
# Solution: Verify SSH credentials and ensure password authentication is enabled
sudo nano /etc/ssh/sshd_config
# Set: PasswordAuthentication yes
sudo systemctl restart sshd
```

**Issue**: Container not accessible on port
```bash
# Solution: Check firewall rules
sudo ufw allow 80/tcp
sudo ufw allow <YOUR_APP_PORT>/tcp
```

**Issue**: Nginx fails to start
```bash
# Solution: Check Nginx configuration
sudo nginx -t
sudo systemctl status nginx
```

### Log Files

All operations are logged to timestamped files:
```bash
deploy_YYYYMMDD_HHMMSS.log
```

View logs:
```bash
tail -f deploy_*.log
```

## üìù Examples

### Example 1: Deploying a Node.js Application

```bash
./deploy.sh
# Enter Git Repository URL: https://github.com/username/nodejs-app.git
# Enter Personal Access Token (PAT): ghp_xxxxxxxxxxxxx
# Enter Branch Name (default: main): main
# Enter SSH Username: ubuntu
# Enter Server IP Address: 203.0.113.45
# Enter SSH Password: ********
# Enter Application Port: 3000
```

### Example 2: Deploying with Docker Compose

```bash
./deploy.sh
# Enter Git Repository URL: https://github.com/username/fullstack-app.git
# Enter Personal Access Token (PAT): ghp_xxxxxxxxxxxxx
# Enter Branch Name (default: main): production
# Enter SSH Username: admin
# Enter Server IP Address: 192.168.1.100
# Enter SSH Password: ********
# Enter Application Port: 8080
```

### Example 3: Cleanup Existing Deployment

```bash
./deploy.sh --cleanup
# Follow prompts to remove all deployed resources
```

## üîí Security Best Practices

1. **Never commit credentials**: Keep PATs and passwords secure
2. **Use strong passwords**: For SSH authentication
3. **Limit PAT scope**: Only grant necessary permissions
4. **Rotate credentials**: Regularly update tokens and passwords
5. **Secure log files**: Logs may contain sensitive information
6. **Use HTTPS**: Configure SSL/TLS certificates for production
7. **Firewall rules**: Restrict unnecessary port access

## üéØ Testing Checklist

Before submission, verify:

- [ ] Script is executable (`chmod +x deploy.sh`)
- [ ] All stages complete without errors
- [ ] Application is accessible via `http://SERVER_IP`
- [ ] Nginx reverse proxy works correctly
- [ ] Logs are generated and readable
- [ ] Cleanup mode removes all resources
- [ ] Script is idempotent (safe to re-run)
- [ ] README is complete and accurate

## üìö Additional Resources

- [Docker Documentation](https://docs.docker.com/)
- [Nginx Configuration Guide](https://nginx.org/en/docs/)
- [Git Personal Access Tokens](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
- [SSH Password Authentication](https://www.ssh.com/academy/ssh/password)

## ü§ù Contributing

This script was created for the DevOps Intern Stage 1 assessment. Improvements and suggestions are welcome!



## üë§ Daniel Umunna

**Your Name**
- GitHub: [@Deon-Gits](https://github.com/Deon-Gits)
- Slack: Daniel Umunna

---


